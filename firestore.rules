/**
 * @file Firebase Security Rules for Manos Unidas Digital Firestore database.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write access patterns.
 * Users can only manage their own profile data. Materials are publicly readable, but only the owner can modify them.
 * Requests for materials can be created by any authenticated user but can only be accessed by the owner of the Material.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /materials/{materialId}: Stores material listings.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for specific materials.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for privacy.
 * - Data validation is relaxed during this prototyping phase to allow for rapid schema iteration.
 * - Strict ownership is enforced for user profiles and material modifications.
 *
 * Denormalization for Authorization:
 *  - The `Material` document has a `postedBy` field that holds the `userId` of the user who created the material. This is used to enforce ownership for updates and deletes.
 *
 * Structural Segregation:
 *  - There is no need for structural segregation as there's no concept of "draft" vs "published" data.  All data within a given collection follows the same access control rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user profile documents.
     * @path: /users/{userId}
     * @allow: (create) User with UID 'user_abc' can create their profile document at /users/user_abc.
     * @allow: (get, update, delete) User with UID 'user_abc' can read, update, or delete their own profile at /users/user_abc.
     * @deny: (create) User with UID 'user_xyz' cannot create a profile document at /users/user_abc.
     * @deny: (get, update, delete) User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle: Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Controls access to material listings.
     * @path: /materials/{materialId}
     * @allow: (get, list) Any user can read or list material listings.
     * @allow: (create) User with UID 'user_abc' can create a material listing with postedBy: 'user_abc'.
     * @allow: (update, delete) User with UID 'user_abc' can update or delete their own material listing at /materials/123 if resource.data.postedBy == 'user_abc'.
     * @deny: (create) User with UID 'user_xyz' cannot create a material listing with postedBy: 'user_abc'.
     * @deny: (update, delete) User with UID 'user_xyz' cannot update or delete the material listing at /materials/123 if resource.data.postedBy == 'user_abc'.
     * @principle: Allows public read access but enforces owner-only writes for material data.
     */
    match /materials/{materialId} {
      function isOwner() {
        return request.auth != null && resource.data.postedBy == request.auth.uid;
      }

      function isCreatingOwner() {
        return request.auth != null && request.resource.data.postedBy == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isCreatingOwner();
      allow update: if isOwner();
      allow delete: if isOwner();

      /**
       * @description: Controls access to requests for a specific material.
       * @path: /materials/{materialId}/requests/{requestId}
       * @allow: (create) Any authenticated user can create a request for a material.
       * @allow: (get, list) Only the owner of the material can read requests for their material.
       * @deny: (get, list) A non-owner of the material cannot read the requests.
       * @principle: Allows anyone to request materials, but restricts reading requests to the material owner.
       */
      match /requests/{requestId} {
        function isSignedIn() {
          return request.auth != null;
        }
        
        function isMaterialOwner(materialId) {
          return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }

        allow get, list: if isSignedIn() && isMaterialOwner(materialId);
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
      }
    }
  }
}