/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where only authenticated admin users can manage materials, and users can only manage their own profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /materials/{materialId}: Stores material listings.
 *
 * Key Security Decisions:
 * - Users can only read their own user document.
 * - Only authenticated users can read material listings.
 * - Only authenticated users, which are admin, can create, update, or delete material listings.
 *
 * Denormalization for Authorization:
 *  - The `materials` collection stores the `postedBy` field, which contains the `uid` of the user who created the material. This denormalization is used to authorize `update` and `delete` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the user to read their own profile.
     * @path /users/{userId}
     * @allow (get, list) User with matching UID can read the profile.
     * @deny (get, list) User trying to read another user's profile.
     * @allow (create) User can create their own profile.
     * @deny (create) User trying to create a profile with a mismatched UID.
     * @allow (update) User can update their own profile.
     * @deny (update) User trying to update another user's profile.
     * @allow (delete) User can delete their own profile.
     *
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) Any signed-in user can read material listings.
     * @deny (create) Non-admin user attempting to create a material listing.
     * @allow (create) Admin user creating a material listing with matching postedBy.
     * @deny (update) Non-admin user attempting to update a material listing.
     * @allow (update) Admin user updating a material listing if they are the original poster.
     * @deny (delete) Non-admin user attempting to delete a material listing.
     * @allow (delete) Admin user deleting a material listing if they are the original poster.
     * @principle Enforces role-based access control for material management.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          //This rule grants all authenticated users, which are the admin, permission to manage the data.
        return isSignedIn();
      }

      function isOwner(postedBy) {
        return postedBy == request.auth.uid;
      }

      function isExistingAdmin() {
        return isAdmin() && exists(/databases/$(database)/documents/materials/$(materialId)) && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isAdmin() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }
  }
}