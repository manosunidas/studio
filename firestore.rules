/**
 * @file Firestore Security Rules for Manos Unidas Digital
 *
 * @core_philosophy This ruleset prioritizes secure access to user data and content ownership.
 *  - Users can only read and write their own profile information.
 *  - Materials are publicly readable but can only be modified or deleted by the owner.
 *  - Requests for materials can be created by anyone, but only the material owner can view them.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles.
 * - /materials/{materialId}: Stores information about materials available for donation or exchange.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials.
 *
 * @key_security_decisions
 *  - Users cannot list all user accounts.
 *  - Read access to materials is public.
 *  - Only material owners can view requests for their materials.
 *  - Strict ownership is enforced for modifications and deletions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (list) - Prevents listing all user profiles.
     * @deny (create, update, delete) - Unauthorized user attempts to modify another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access control for material listings.
     * @path /materials/{materialId}
     * @allow (get, list) - Allows anyone to read or list materials.
     * @allow (create) - Authenticated user creates a new material listing with their UID as the owner.
     * @allow (update, delete) - Only the material owner can update or delete their material.
     * @deny (create, update, delete) - Unauthorized user attempts to modify or delete another user's material.
     * @principle Enforces public read access while maintaining owner-only write access.
     */
    match /materials/{materialId} {
      function isOwner(materialOwnerId) {
        return request.auth.uid == materialOwnerId;
      }

       function isExistingOwner(materialOwnerId) {
          return isOwner(materialOwnerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);

      /**
       * @description Controls access to requests for a specific material.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) - Allows any authenticated user to create a request for a material.
       * @allow (get, list) - Only the owner of the material can read the requests.
       * @deny (update, delete) - No one can update or delete a request once it's created.
       * @principle Restricts read access to material owners while allowing anyone to create requests.
       */
      match /materials/{materialId}/requests/{requestId} {
        allow get, list: if isSignedIn() && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}