/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and materials.
 * Users can only read and write their own profile data. Materials can be read by anyone,
 * but only the user who posted a material can modify or delete it. Material requests can be created by anyone.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /materials/{materialId}: Stores material listings.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for a material.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The ruleset prioritizes strong authorization and does not enforce strict data validation during this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Material documents contain a `postedBy` field to indicate ownership, allowing rules to efficiently check if the requesting user is the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user's auth UID matches the userId.
     * @deny (create, update, delete) if the user's auth UID does not match the userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) anyone can read material
     * @allow (create) only signed in user can create material and postedBy must be equal to auth.uid.
     * @allow (update, delete) only the user who posted the material can modify or delete it.
     * @principle Enforces document ownership for writes.
     */
    match /materials/{materialId} {
      function isOwner(postedBy) {
        return request.auth != null && request.auth.uid == postedBy;
      }

      function isExistingOwner(postedBy) {
        return isOwner(postedBy) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);

      /**
       * @description Controls access to requests for a material.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) anyone can create a request
       * @allow (get, list) only the material owner can read them.
       * @deny (update, delete) no one can update or delete a request
       * @principle Enforces document ownership for reads.
       */
      match /requests/{requestId} {
        function isMaterialOwner(materialId) {
          return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }
        allow get, list: if request.auth != null && isMaterialOwner(materialId);
        allow create: if request.auth != null;
        allow update, delete: if false;
      }
    }
  }
}