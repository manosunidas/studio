rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the document.
     * @deny (get, create, update, delete) if the user is not the owner of the document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.

      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) anyone can read material listings.
     * @allow (create) only the authenticated user can create material listings. The postedBy field must match the user's UID.
     * @allow (update, delete) only the owner of the material can modify or delete it.
     * @deny (create) if the postedBy field does not match the user's UID.
     * @deny (update, delete) if the user is not the owner of the material.
     * @principle Enforces public read access with owner-only writes and validates ownership on creation.
     */
    match /materials/{materialId} {
      function isOwner() {
        return request.auth != null && resource.data.postedBy == request.auth.uid;
      }
      
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
     
    }

    /**
     * @description Controls access to material requests.
     * @path /materials/{materialId}/requests/{requestId}
     * @allow (create) anyone can create a request for a material.
     * @allow (get, list) only the owner of the material can read requests.
     * @deny (update, delete) no one can update or delete a request.
     * @principle Allows public creation of requests, but restricts read access to the material owner.
     */
    match /materials/{materialId}/requests/{requestId} {
       function isMaterialOwner(materialId) {
         return request.auth != null && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
       }
       
       function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isMaterialOwner(materialId);
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}