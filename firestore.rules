/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, allowing public read access to material listings
 * while enforcing strict ownership for user profiles, material modifications, and request management.
 * Anonymous users are supported with temporary IDs to allow them to interact with the application.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /materials/{materialId}: Stores material listings with an 'postedBy' field for ownership.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials.
 *
 * Key Security Decisions:
 * - User profiles are private; only the authenticated user can access their own profile.
 * - Material listings are publicly readable, but only the owner can modify or delete them.
 * - Anyone can create a request for a material, but only the material owner can read the requests.
 * - Data shape validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Material documents include a 'postedBy' field, which stores the user ID of the user who posted the material.
 * This allows rules to quickly check ownership without additional reads.
 *
 * Structural Segregation:
 * - Public data (material listings) and private data (user profiles) are stored in separate top-level collections,
 * ensuring that public read access to materials does not compromise user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information. Only the authenticated user can read/write their own document.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can access /users/user123
     * @deny (get, create, update, delete) User with ID 'user456' cannot access /users/user123
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Manages material listings. Anyone can read material, but only the user who posted the material can modify or delete it.
     * @path /materials/{materialId}
     * @allow (get, list) Any user can read any material listing.
     * @allow (create) User with ID 'user123' can create a material listing with postedBy = 'user123'.
     * @allow (update, delete) User with ID 'user123' can update/delete a material listing where resource.data.postedBy == 'user123'.
     * @deny (create) User with ID 'user123' cannot create a material listing with postedBy = 'user456'.
     * @deny (update, delete) User with ID 'user456' cannot update/delete a material listing where resource.data.postedBy == 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /materials/{materialId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.postedBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.postedBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.postedBy == request.auth.uid;

        /**
         * @description Manages requests for a material. Anyone can create a request, but only the material owner can read them.
         * @path /materials/{materialId}/requests/{requestId}
         * @allow (create) Any authenticated user can create a request.
         * @allow (get, list) Only the owner of the material can read the requests.
         * @deny (get, list) A user who doesn't own the material cannot read the requests.
         * @principle Restricts access to requests based on material ownership.
         */
        match /materials/{materialId}/requests/{requestId} {
          allow get: if request.auth != null && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
          allow list: if request.auth != null && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
          allow create: if request.auth != null;
          allow update: if false;
          allow delete: if false;
        }
    }
  }
}