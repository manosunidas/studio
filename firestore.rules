rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete, list) if the request is made by the user with matching userId
     * @deny (create, update, get, delete, list) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure material listings. Anyone can read a material, but only the owner can modify or delete it.
     * @path /materials/{materialId}
     * @allow (get, list) if true
     * @allow (create) if the user is authenticated and the postedBy field matches the user's ID.
     * @allow (update, delete) if the user is authenticated and is the owner of the material.
     * @deny (create, update, delete) if the user is not authenticated or is not the owner of the material.
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(postedBy) {
        return request.auth.uid == postedBy;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.postedBy == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();

      /**
       * @description Secure requests for a material. Anyone can create a request, but only the material owner can read them.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) if true
       * @allow (get, list) if the user is authenticated and is the owner of the parent material.
       * @deny (get, list, create, update, delete) if the user is not authenticated or is not the owner of the parent material.
       * @principle Restricts read access to the material owner.
       */
      match /requests/{requestId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMaterialOwner(materialId) {
          return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }

        allow get, list: if isSignedIn() && isMaterialOwner(materialId);
        allow create: if true;
        allow update, delete: if false;
      }
    }
  }
}