rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (auth UID matches userId).
     * @allow (get, update, delete) If the user is the owner of the profile (auth UID matches userId).
     * @deny (create, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to material documents.
     * @path /materials/{materialId}
     * @allow (get, list) Public read access to all materials.
     * @allow (create) If the postedBy field in the new document matches the user's auth UID.
     * @allow (update, delete) If the user is the owner of the material (postedBy field matches auth UID).
     * @deny (create, update, delete) If the user is not the owner of the material.
     * @principle Enforces document ownership for writes, allows public read access.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.postedBy == request.auth.uid;
      }

      function isNewOwner() {
        return request.resource.data.postedBy == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && exists(resource);
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isNewOwner();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();

        /**
         * @description Controls access to requests for a specific material.
         * @path /materials/{materialId}/requests/{requestId}
         * @allow (create) Anyone can create a request for a material.
         * @allow (get, list) Only the owner of the material can read the requests.
         * @allow (update, delete) No one can update or delete requests (currently).
         * @principle Enforces that only the material owner can see who has requested it.
         */
        match /requests/{requestId} {

          function isSignedIn() {
            return request.auth != null;
          }

          function isMaterialOwner(materialId) {
            return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
          }

          allow get, list: if isSignedIn() && isMaterialOwner(materialId);
          allow create: if isSignedIn();
          allow update, delete: if false;
        }
    }
  }
}