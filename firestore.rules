/**
 * @fileOverview
 * This ruleset enforces a user-ownership model for user profiles and material listings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the authenticated user.
 * - /materials/{materialId}: Stores material listings. Publicly readable, but only the owner can modify.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for a material. Anyone can create, but only the material owner can read or manage them.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents.
 * - Material listings are publicly readable.
 * - Only the owner of a material can modify or delete it.
 * - Anyone can create a request for a material.
 * - The owner of the material can manage requests associated with their materials.
 *
 * Denormalization for Authorization:
 * - Material documents have a `postedBy` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) if true (publicly readable).
     * @allow (create) if the user is authenticated and the postedBy field matches the user's ID.
     * @allow (update, delete) if the user is the owner of the material.
     * @deny (create, update, delete) if the user is not the owner of the material.
     * @principle Enforces public read access with owner-only writes.
     */
    match /materials/{materialId} {
      function isOwner(postedBy) {
        return request.auth != null && request.auth.uid == postedBy;
      }

      function isExistingOwner(postedBy) {
        return isOwner(postedBy) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);
    }

    /**
     * @description Controls access to requests for materials.
     * @path /materials/{materialId}/requests/{requestId}
     * @allow (create) if true (anyone can create a request).
     * @allow (get, list, update, delete) if the user is the owner of the material.
     * @deny (get, list, update, delete) if the user is not the owner of the material.
     * @principle Allows public creation of requests, but restricts management to the material owner.
     */
    match /materials/{materialId}/requests/{requestId} {
      function isMaterialOwner(materialId) {
        return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
      }

      allow get, list: if isMaterialOwner(materialId);
      allow create: if true;
      allow update: if isMaterialOwner(materialId);
      allow delete: if isMaterialOwner(materialId);
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}