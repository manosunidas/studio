/**
 * @file Firebase Security Rules for Manos Unidas Digital Firestore database.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read access patterns. Users can only manage their own profile data.
 * Materials can be viewed by anyone, but only modified or deleted by their creator.
 * Requests for materials can be created by anyone, but only read or deleted by the material's owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /materials/{materialId}: Stores listings of materials available for donation or exchange.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for specific materials.
 *
 * Key Security Decisions:
 * - Users cannot list all user accounts.
 * - Schema validation is relaxed to allow for rapid prototyping, but ownership checks are strictly enforced.
 * - Timestamp fields are not validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Material documents include a `postedBy` field (ownerId) to simplify ownership checks for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can access/modify their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (list) - No one can list all users.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) - Anyone can view material listings.
     * @allow (create) - User with UID 'user123' can create a material with postedBy: 'user123'.
     * @allow (update, delete) - Only the user who posted the material can modify or delete it.
     * @deny (create) - User with UID 'user456' cannot create a material with postedBy: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot modify material posted by 'user123'.
     * @principle Enforces public read access with owner-only writes.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();

      /**
       * @description Controls access to requests for materials.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) - Any signed-in user can create a request for a material.
       * @allow (get, list, delete) - Only the owner of the material can read or delete requests.
       * @deny (get, list, delete) - User with UID 'user456' cannot access requests for material posted by 'user123'.
       * @principle Restricts request management to the material owner.
       */
      match /requests/{requestId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMaterialOwner(materialId) {
            return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }
        
        allow create: if isSignedIn();
        allow get, list, delete: if isSignedIn() && isMaterialOwner(materialId);
        allow update: if false;
      }
    }
  }
}