/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset prioritizes data ownership and user privacy. Users can only
 * read and write their own data, unless explicitly allowed otherwise.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can
 *   access their own profile.
 * - /materials/{materialId}: Stores material listings. Publicly readable, but
 *   only the owner can modify.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for
 *   materials. Anyone can create a request, but only the material owner can read.
 *
 * Key Security Decisions:
 * - Users cannot list all users (privacy).
 * - Materials are publicly listable to encourage sharing.
 * - Request subcollections are secured to ensure that only material owners can
 *   view requests for their materials.
 *
 * Denormalization for Authorization:
 * - Materials store the `postedBy` field to quickly identify the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own user document.
     * @deny (create) User attempts to create a document with a mismatched userId.
     * @allow (get, update, delete) Signed-in user can read/write their own user document.
     * @deny (get, update, delete) User attempts to read/write another user's document.
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rule for material documents.
     * @path /materials/{materialId}
     * @allow (get, list) Anyone can read the material.
     * @allow (create) Signed-in user can create a material with their ID as the postedBy field.
     * @deny (create) User attempts to create a material with a mismatched postedBy field.
     * @allow (update, delete) Signed-in user can update/delete their own material.
     * @deny (update, delete) User attempts to update/delete another user's material.
     * @principle Allows public read access to materials while enforcing owner-only writes.
     */
    match /materials/{materialId} {
      function isOwner() {
        return resource.data.postedBy == request.auth.uid;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Rule for request documents.
     * @path /materials/{materialId}/requests/{requestId}
     * @allow (create) Any signed-in user can create a request for a material.
     * @deny (create) Unauthenticated users cannot create requests.
     * @allow (get, list) Only the owner of the material can read requests for it.
     * @deny (get, list) Other users cannot read requests for a material they don't own.
     * @principle Restricts read access to requests to the material owner.
     */
    match /materials/{materialId}/requests/{requestId} {
        function isMaterialOwner(materialId) {
            return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }

        function isSignedIn() {
            return request.auth != null;
        }
      allow create: if isSignedIn();
      allow get, list: if isSignedIn() && isMaterialOwner(materialId);
      allow update, delete: if false;
    }
  }
}