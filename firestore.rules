/**
 * @file Firebase Security Rules for Manos Unidas Digital Firestore database.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and material listings,
 * combined with public read access for material listings.  Data validation is relaxed for prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the authenticated user.
 * - /materials/{materialId}: Stores material listings; publicly readable, but only the owner can modify.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials; readable only by the material owner.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Material listings are publicly readable but only the creator can modify them.
 * - Listing of user documents is disallowed for privacy.
 * - Requests subcollection is readable by the material owner.
 *
 * Denormalization for Authorization:
 * - Material documents have a `postedBy` field, which is the UID of the user who created the listing. This is used for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get) User with matching UID can create, update, and get their profile.
     * @deny (create, update, get) User cannot access another user's profile.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Secure material listings. Anyone can read, but only the owner can modify.
     * @path /materials/{materialId}
     * @allow (get, list) Anyone can read material listings.
     * @allow (create) Authenticated user can create a material listing with their UID in the `postedBy` field.
     * @allow (update, delete) Only the user who posted the material can update or delete it.
     * @deny (create, update, delete) Non-owners cannot modify material listings.
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /materials/{materialId} {
      function isOwner() {
        return request.auth != null && resource.data.postedBy == request.auth.uid;
      }

      function isCreatingOwner() {
        return request.auth != null && request.resource.data.postedBy == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();

      /**
       * @description Secure requests for materials. Only the material owner can read requests. Anyone can create a request.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) Any signed in user can create a request for a material.
       * @allow (get, list) Only the owner of the material can read the requests.
       * @deny (update, delete) No one can update or delete a request.
       * @principle Restricts access to requests based on material ownership.
       */
      match /requests/{requestId} {
        function isMaterialOwner(materialId) {
          return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }
        allow get, list: if isSignedIn() && isMaterialOwner(materialId);
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}