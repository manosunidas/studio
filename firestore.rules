/**
 * @file Firestore Security Rules for Manos Unidas Digital.
 *
 * @corePhilosophy
 * This ruleset enforces a user-ownership model for user profiles and materials.
 * Materials requests have more complex permissions.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles, secured by user ID.
 * - /materials/{materialId}: Stores material listings, secured by the posting user's ID.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Anyone can read material listings.
 * - Only the user who posted a material can modify or delete it.
 * - Anyone can create a material request.
 * - Only the material owner can read material requests.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching ID can access their profile.
     * @allow (create) User with matching ID can create their profile.
     * @deny (get, update, delete) User trying to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) Everyone can read material listings.
     * @allow (create) User can create a material listing if postedBy matches their UID.
     * @allow (update, delete) User who posted the material can modify or delete it.
     * @deny (create) User trying to create a material listing with mismatched postedBy.
     * @deny (update, delete) User trying to modify or delete another user's material listing.
     * @principle Enforces document ownership for material writes, allows public reads.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);
    }

    /**
     * @description Grants access to material requests.
     * @path /materials/{materialId}/requests/{requestId}
     * @allow (create) Any authenticated user can create a request for a material.
     * @allow (get, list) Only the owner of the material can read requests.
     * @deny (get, list) Other users cannot read material requests.
     * @deny (update, delete) No one can update or delete material requests.
     * @principle Allows anyone to create requests, restricts reading to material owner.
     */
    match /materials/{materialId}/requests/{requestId} {
      allow get, list: if isMaterialOwner(materialId);
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isMaterialOwner(materialId) {
        return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
    }
  }
}