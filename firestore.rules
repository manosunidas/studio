/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model: User-owned data with public read access for certain collections and owner-only or admin-only write access for others.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /materials/{materialId}: Stores material listings. Anyone can read, but only the poster can modify/delete.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials. Anyone can create a request, but only the material owner can read or manage requests.
 *
 * Key Security Decisions:
 * - Public read access for /materials/{materialId} to facilitate discovery.
 * - Strict ownership model for user profiles in /users/{userId}.
 * - Owner-only access to requests in /materials/{materialId}/requests/{requestId}.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Material documents denormalize the `postedBy` field, which is used to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (create) Non-authenticated users cannot create profiles.
     * @deny (get, list, update, delete) Other users cannot access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the /materials/{materialId} collection.
     * @path /materials/{materialId}
     * @allow (get, list) Anyone can read material listings.
     * @allow (create) Authenticated user can create a material listing if the postedBy field matches their UID.
     * @allow (update, delete) Only the user who posted the material can modify or delete it.
     * @deny (create) Creating a material with a mismatched postedBy field.
     * @deny (update, delete) Other users cannot modify or delete material.
     * @principle Public read access with owner-only writes.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return resource.data.postedBy == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid && request.resource.data.id == materialId;
      allow update: if isExistingOwner(request.auth.uid) && request.resource.data.postedBy == resource.data.postedBy;
      allow delete: if isExistingOwner(request.auth.uid);

      /**
       * @description Secure the /materials/{materialId}/requests/{requestId} collection.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) Any authenticated user can create a request for a material.
       * @allow (get, list) Only the owner of the material can read requests.
       * @deny (update, delete) Requests cannot be updated or deleted.
       * @principle Owner-only access to requests.
       */
      match /materials/{materialId}/requests/{requestId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isMaterialOwner(userId) {
          return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == userId;
        }

        allow get, list: if isMaterialOwner(request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.materialId == materialId;
        allow update, delete: if false;
      }
    }
  }
}