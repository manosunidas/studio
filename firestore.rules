/**
 * @file Firebase Security Rules for Manos Unidas Digital
 *
 * @corePhilosophy This ruleset enforces a user-ownership model for personal data and a public-read, owner-write model for materials.
 *
 * @dataStructure
 *  - /users/{userId}: Stores personal user information; access is restricted to the authenticated user.
 *  - /materials/{materialId}: Stores material listings; read access is public, but write access is restricted to the material's owner.
 *  - /transactions/{transactionId}: Stores transaction data; access is restricted to the donor and claimer.
 *  - /suggestions/{suggestionId}: Stores material suggestions; access is restricted to the user for whom the suggestion was made.
 *
 * @keySecurityDecisions
 *  - Users can only access their own data under /users/{userId}.
 *  - Material listings are publicly readable, but only the owner can modify or delete them.
 *  - Listing of users and suggestions is disallowed to prevent information leakage.
 *
 * @denormalizationForAuthorization
 *  - Materials include the userId of the owner, enabling ownership checks without additional reads.
 *  - Transactions include donorId and claimerId, allowing access control without external lookups.
 *  - Suggestions include the userId of the intended recipient, enabling recipient-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' retrieves their profile.
     *   - request.auth.uid: 'user123'
     * @deny (update) User with ID 'user456' attempts to update user 'user123' profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces strict user-ownership: only the authenticated user can access their own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get) Any user can read a material listing.
     * @allow (list) Any user can list material listings.
     * @allow (create) User with ID 'user123' creates a material listing with userId: 'user123'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @deny (update) User with ID 'user456' attempts to update a material listing owned by 'user123'.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Allows public read access but restricts write access to the material's owner.
     */
    match /materials/{materialId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    /**
     * @description Controls access to transaction records.
     * @path /transactions/{transactionId}
     * @allow (get) User with ID 'user123' retrieves a transaction where they are the donor.
     *   - request.auth.uid: 'user123'
     *   - resource.data.donorId: 'user123'
     * @allow (get) User with ID 'user456' retrieves a transaction where they are the claimer.
     *   - request.auth.uid: 'user456'
     *   - resource.data.claimerId: 'user456'
     * @deny (update) User with ID 'user789' attempts to update a transaction they are not involved in.
     *   - request.auth.uid: 'user789'
     *   - resource.data.donorId: 'user123'
     *   - resource.data.claimerId: 'user456'
     * @principle Restricts access to transaction details to the involved users (donor and claimer).
     */
    match /transactions/{transactionId} {
      function isDonorOrClaimer(donorId, claimerId) {
        return request.auth.uid == donorId || request.auth.uid == claimerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isDonorOrClaimer(resource.data.donorId, resource.data.claimerId);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.donorId == request.auth.uid || request.resource.data.claimerId == request.auth.uid);
      allow update: if isSignedIn() && isDonorOrClaimer(resource.data.donorId, resource.data.claimerId);
      allow delete: if isSignedIn() && isDonorOrClaimer(resource.data.donorId, resource.data.claimerId);
    }

    /**
     * @description Controls access to material suggestions.
     * @path /suggestions/{suggestionId}
     * @allow (get) User with ID 'user123' retrieves a suggestion made for them.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (update) User with ID 'user456' attempts to update a suggestion made for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Restricts access to suggestions to the user for whom the suggestion was made.
     */
    match /suggestions/{suggestionId} {
      function isSuggestionForUser(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isSuggestionForUser(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isSuggestionForUser(resource.data.userId);
      allow delete: if isSignedIn() && isSuggestionForUser(resource.data.userId);
    }
  }
}