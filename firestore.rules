/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It allows open reads for public data (materials) while restricting writes to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user.
 * - /materials/{materialId}: Stores material listings, publicly readable but writable only by the owner.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials. Anyone can create, but reads are restricted to the material owner.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Material listings are public, but modifications are restricted to the owner.
 * - Material requests can be created by any signed-in user. Only the owner of the material can read the requests.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - Material documents denormalize the `postedBy` field (owner's UID) to enable efficient ownership checks.
 * - Request documents denormalize `solicitanteId` and `materialId` for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (create, update, delete) - Only the authenticated user can manage their own profile.
     * @deny (create, update, delete) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure material listings.
     * @path /materials/{materialId}
     * @allow (get, list) - Anyone can read material listings.
     * @allow (create) - Only signed-in users can create listings, with authorId set to their UID.
     * @allow (update, delete) - Only the owner (postedBy) can modify or delete listings.
     * @deny (create) - If the postedBy field does not match the authenticated user's ID.
     * @deny (update, delete) - If the authenticated user is not the owner (postedBy).
     * @principle Allows public read access, enforces owner-only writes.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.postedBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.postedBy);

          /**
           * @description Secure material requests.
           * @path /materials/{materialId}/requests/{requestId}
           * @allow (create) - Any signed-in user can create a request for a material.
           * @allow (get, list) - Only the material owner can read the requests.
           * @deny (create) - If not signed in.
           * @principle Allows anyone to create requests, but restricts reads to the material owner.
           */
          match /materials/{materialId}/requests/{requestId} {
            allow get, list: if isSignedIn() && isOwner(get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy);
            allow create: if isSignedIn() && request.resource.data.solicitanteId == request.auth.uid && request.resource.data.materialId == materialId;
            allow update, delete: if false;
          }
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}