/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It allows for flexible data structures in the prototyping phase but enforces strict
 * authorization to prevent unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their profile.
 * - /materials/{materialId}: Stores material listings.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials.
 *
 * Key Security Decisions:
 * - Users can only manage their own user documents.
 * - Materials are publicly readable, but only the owner can modify them.
 * - Material requests can be created by anyone, but only the material owner can manage them.
 * - Data validation is relaxed in the prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Material documents include a `postedBy` field to easily determine the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create, update, get, delete, list) if the user is the owner.
     * @deny (create, update, get, delete, list) if the user is not the owner.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      //isSingedIn returns true if the user is singed in.
      function isSignedIn() {
        return request.auth != null;
      }
      //isOwner returns true if the user id matches the authenticated user id.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
       //isExistingOwner returns true if the user is the owner and the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) anyone can read materials.
     * @allow (create) only signed in users can create materials and postedBy matches their UID.
     * @allow (update, delete) only the owner can modify or delete materials.
     * @deny (create, update, delete) if conditions are not met.
     * @principle Enforces owner-only write access to materials.
     */
    match /materials/{materialId} {
        //isSingedIn returns true if the user is singed in.
      function isSignedIn() {
        return request.auth != null;
      }
      //isOwner returns true if the material's postedBy matches the authenticated user id.
      function isOwner() {
        return isSignedIn() && resource.data.postedBy == request.auth.uid;
      }
      //isExistingOwner returns true if the user is the owner and the resource exists.
      function isExistingOwner() {
        return isOwner() && exists(resource);
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();

      /**
       * @description Controls access to material requests.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) anyone can create a request.
       * @allow (get, list, update, delete) only the material owner can manage requests.
       * @deny (get, list, update, delete) if the user is not the material owner.
       * @principle Restricts request management to the material owner.
       */
      match /requests/{requestId} {
         //isSingedIn returns true if the user is singed in.
        function isSignedIn() {
          return request.auth != null;
        }
        //isOwner returns true if the material's postedBy matches the authenticated user id.
        function isMaterialOwner() {
          return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }
         //getParentMaterial returns the material document associated with the material request.
        function getParentMaterial() {
            return get(/databases/$(database)/documents/materials/$(materialId));
        }
         //isMaterialOwner returns true if the user is the owner of the material.
        function isExistingMaterialOwner() {
          return isSignedIn() && isMaterialOwner();
        }
        allow create: if isSignedIn();
        allow get: if isExistingMaterialOwner();
        allow list: if isExistingMaterialOwner();
        allow update: if isExistingMaterialOwner();
        allow delete: if isExistingMaterialOwner();
      }
    }
  }
}