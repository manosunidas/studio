/**
 * @file Firebase Security Rules for Manos Unidas Digital
 * @version 2
 *
 * @Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and material listings.
 * Materials are publicly readable, but only the owner can modify them.
 * Transactions are restricted to involved users (donor/claimer).
 * Suggestions are visible only to the user for whom they are made.
 *
 * @Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /materials/{materialId}: Stores material listings.
 * - /transactions/{transactionId}: Stores transaction records.
 * - /suggestions/{suggestionId}: Stores AI-powered material suggestions.
 *
 * @Key Security Decisions:
 * - Public `list` access for `/materials`.
 * - Strict ownership enforced for `/users/{userId}`.
 * - Transactions limited to donor/claimer access.
 * - Suggestions are visible only to the user for whom they are made.
 *
 * @Denormalization for Authorization:
 * - Materials: `postedBy` field stores the user ID of the material's owner.
 * - Transactions: `donorId` and `claimerId` fields store the user IDs of the involved parties.
 * - Suggestions: `userId` field stores the user ID of the user to whom the suggestion is addressed.
 *
 * @Structural Segregation:
 * - User profiles are stored separately from public material listings.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own document.
     * @deny (create) - Unauthenticated user attempts to create a user profile.
     * @deny (update, delete) - Authenticated user attempts to modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to material listings, but restricts write access to the owner.
     * @path /materials/{materialId}
     * @allow (get, list) - Anyone can read material listings.
     * @allow (create) - Authenticated user can create a material listing, and postedBy is set to their uid.
     * @allow (update, delete) - Authenticated user can only modify/delete their own material listings.
     * @deny (create) - Unauthenticated user attempts to create a material listing.
     * @deny (update, delete) - Authenticated user attempts to modify another user's material listing.
     * @principle Allows public read access while enforcing ownership for write access.
     */
    match /materials/{materialId} {
      function isOwner(postedBy) {
        return request.auth != null && request.auth.uid == postedBy;
      }

      function isExistingOwner(postedBy) {
        return isOwner(postedBy) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);
    }

    /**
     * @description Restricts access to transaction records to only the involved users (donor or claimer).
     * @path /transactions/{transactionId}
     * @allow (get, list) - Authenticated user can only read transactions where they are the donor or claimer.
     * @allow (create) - Authenticated user can create a transaction.
     * @allow (update, delete) - No one can update or delete transactions.
     * @deny (get, list) - Authenticated user attempts to read a transaction where they are not involved.
     * @deny (create) - Unauthenticated user attempts to create a transaction.
     * @deny (update, delete) - Any user attempts to modify or delete a transaction.
     * @principle Restricts transaction visibility and modification to authorized users only.
     */
    match /transactions/{transactionId} {
      function isParticipant(donorId, claimerId) {
        return request.auth != null && (request.auth.uid == donorId || request.auth.uid == claimerId);
      }

      allow get: if isParticipant(resource.data.donorId, resource.data.claimerId);
      allow list: if request.auth != null && (resource.data.donorId == request.auth.uid || resource.data.claimerId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to suggestions to the user for whom the suggestion was made.
     * @path /suggestions/{suggestionId}
     * @allow (get, list) - Authenticated user can only read suggestions made for them.
     * @allow (create) - Authenticated user can create a suggestion.
     * @allow (update, delete) - No one can update or delete suggestions.
     * @deny (get, list) - Authenticated user attempts to read a suggestion made for another user.
     * @deny (create) - Unauthenticated user attempts to create a suggestion.
     * @deny (update, delete) - Any user attempts to modify or delete a suggestion.
     * @principle Restricts suggestion visibility and modification to authorized users only.
     */
    match /suggestions/{suggestionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(resource.data.userId);
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }
  }
}