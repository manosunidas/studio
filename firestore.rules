/**
 * @file Firestore Security Rules for Manos Unidas Digital
 * @version Prototyping Mode - Data shape is not enforced.
 *
 * @description This ruleset enforces a user-ownership model for sensitive data,
 * allowing public read access to materials while restricting write access to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can access their own profile.
 * - /materials/{materialId}: Stores material listings.  Anyone can read, but only the creator can modify.
 * - /transactions/{transactionId}: Stores transaction records. Access is restricted to involved users.
 * - /suggestions/{suggestionId}: Stores material suggestions. Only the intended user can read.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the absence of a top-level `/users` collection.
 * - Public read access is granted to the `/materials` collection to facilitate browsing.
 * - Write access to `/materials` is strictly controlled via the `postedBy` field.
 *
 * Denormalization for Authorization:
 * - The `materials` documents contain the `postedBy` field, which is the user ID of the creator. This allows
 *   ownership checks without needing to perform additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/users/user123' }
     * @allow (get) User with ID 'user123' can read their profile.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/users/user123' }
     * @allow (update) User with ID 'user123' can update their profile.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/users/user123' }
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/users/user123' }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *   Request: { auth: { uid: 'user456' }, path: '/databases/(default)/documents/users/user123' }
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     *   Request: { auth: { uid: 'user456' }, path: '/databases/(default)/documents/users/user123' }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the current user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user ID matches the authenticated user's ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to material listings.
     * @path /materials/{materialId}
     * @allow (get) Any user can read a material listing.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/materials/material1' }
     * @allow (list) Any user can list material listings.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/materials' }
     * @allow (create) User with ID 'user123' can create a material listing with postedBy 'user123'.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/materials', resource: { data: { postedBy: 'user123' } } }
     * @allow (update) User with ID 'user123' can update a material listing they posted (postedBy is 'user123').
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/materials/material1', resource: { data: { postedBy: 'user123' } }, resource.data.postedBy == 'user123' }
     * @allow (delete) User with ID 'user123' can delete a material listing they posted (postedBy is 'user123').
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/materials/material1', resource: { data: { postedBy: 'user123' } } }
     * @deny (create) User with ID 'user123' cannot create a material listing with postedBy 'user456'.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/materials', resource: { data: { postedBy: 'user456' } } }
     * @deny (update) User with ID 'user456' cannot update a material listing posted by 'user123'.
     *   Request: { auth: { uid: 'user456' }, path: '/databases/(default)/documents/materials/material1', resource: { data: { postedBy: 'user123' } } }
     * @principle Allows public reads but restricts writes to the owner (creator).
     */
    match /materials/{materialId} {
      // Helper function to check if the current user is the owner of the material
      function isOwner(postedBy) {
        return request.auth.uid == postedBy;
      }

      // Helper function to check if the user is the existing owner
      function isExistingOwner(postedBy) {
        return isOwner(postedBy) && exists(resource);
      }

      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.postedBy;
      allow update: if isOwner(resource.data.postedBy);
      allow delete: if isOwner(resource.data.postedBy);
    }

    /**
     * @description Controls access to transaction records.
     * @path /transactions/{transactionId}
     * @allow (get) User with ID 'user123' can read a transaction where they are the donor or claimer.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/transactions/transaction1', resource: { data: { donorId: 'user123' } } }
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/transactions/transaction1', resource: { data: { claimerId: 'user123' } } }
     * @deny (get) User with ID 'user123' cannot read a transaction where they are not the donor or claimer.
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/transactions/transaction1', resource: { data: { donorId: 'user456', claimerId: 'user789' } } }
     * @principle Restricts access to transaction details to the involved users.
     */
    match /transactions/{transactionId} {
      // Helper function to check if the current user is involved in the transaction
      function isParticipant(donorId, claimerId) {
        return request.auth.uid == donorId || request.auth.uid == claimerId;
      }

      allow get: if isParticipant(resource.data.donorId, resource.data.claimerId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to material suggestions.
     * @path /suggestions/{suggestionId}
     * @allow (get) User with ID 'user123' can read a suggestion made for them (userId is 'user123').
     *   Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/suggestions/suggestion1', resource: { data: { userId: 'user123' } } }
     * @deny (get) User with ID 'user456' cannot read a suggestion made for 'user123' (userId is 'user123').
     *   Request: { auth: { uid: 'user456' }, path: '/databases/(default)/documents/suggestions/suggestion1', resource: { data: { userId: 'user123' } } }
     * @principle Restricts access to suggestions to the intended user.
     */
    match /suggestions/{suggestionId} {
      // Helper function to check if the current user is the intended recipient of the suggestion
      function isIntendedRecipient(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isIntendedRecipient(resource.data.userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}