/**
 * @file Firestore Security Rules
 * @description This ruleset prioritizes ease of use by allowing unauthenticated users to request materials.
 * Data Structure:
 * - /materials/{materialId}: Publicly readable material listings.
 * - /materials/{materialId}/requests/{requestId}: Requests for materials, publicly writable, owner-only readable.
 *
 * Key Security Decisions:
 * - Unauthenticated users can create requests for materials.
 * - Only the material owner can read the requests for their materials.
 * - Users can only manage their own user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) - If the user is authenticated and the userId matches the authenticated user's UID.
     * @deny (create, update, delete) - If the user is not authenticated or the userId does not match the authenticated user's UID.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Allows anyone to read materials, but only the poster can modify or delete them.
     * @path /materials/{materialId}
     * @allow (get, list) - Anyone can read the materials.
     * @allow (create) - If the user is authenticated and the postedBy field matches the authenticated user's UID.
     * @allow (update, delete) - If the user is authenticated, the material exists, and the postedBy field matches the authenticated user's UID.
     * @deny (create, update, delete) - If the user is not authenticated or the postedBy field does not match the authenticated user's UID.
     * @principle Enforces public read access with owner-only writes.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.postedBy == request.auth.uid;
      allow update, delete: if request.auth != null && request.resource.data.postedBy == request.auth.uid;

      /**
       * @description Allows anyone to create a request for a material, but only the material owner can read them.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) - Anyone can create a request.
       * @allow (get, list) - If the user is the owner of the material.
       * @deny (update, delete) - Always deny update and delete operations.
       * @principle Allows unauthenticated requests with owner-only read access.
       */
      match /materials/{materialId}/requests/{requestId} {
        allow get, list: if request.auth != null && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        allow create: if true;
        allow update, delete: if false;
      }
    }
  }
}