/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model:
 *  - User profiles are strictly private (owner-only access).
 *  - Material listings are publicly readable, but only the owner can modify them.
 *  - Material requests can be created by anyone for now.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /materials/{materialId}: Stores material listings.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access to material listings allows for open discovery of available items.
 *
 * Denormalization for Authorization:
 * - Material documents contain a `postedBy` field (the user ID) for owner-based authorization.
 *
 * Structural Segregation:
 * - Drafts and published content are not applicable in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'alice' (auth.uid == 'alice') can read, update, and delete their own profile.
     * @allow (create) User 'alice' (auth.uid == 'alice') can create their own profile.
     * @deny (get, update, delete) User 'bob' (auth.uid == 'bob') cannot access 'alice's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) Anyone can read or list materials.
     * @allow (create) User 'alice' (auth.uid == 'alice') can create a material with postedBy: 'alice'.
     * @allow (update, delete) User 'alice' (auth.uid == 'alice') can update/delete their own material (postedBy: 'alice').
     * @deny (create) User 'bob' (auth.uid == 'bob') cannot create a material with postedBy: 'alice'.
     * @deny (update, delete) User 'bob' (auth.uid == 'bob') cannot update/delete 'alice's material.
     * @principle Allows public read access, but enforces ownership for writes on material listings.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);

       /**
         * @description Secure access to material requests.
         * @path /materials/{materialId}/requests/{requestId}
         * @allow (create) Anyone can create a request for a material.
         * @allow (get, list) Only the owner of the material can read the requests.
         * @deny (delete) No one can delete a request.
         * @deny (update) No one can update a request.
         * @principle Allows anyone to create a request, but restricts reading to the material owner.
         */
      match /materials/{materialId}/requests/{requestId} {
          allow get, list: if isMaterialOwner(materialId);
          allow create: if isSignedIn();
          allow update, delete: if false;
      }
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    function isMaterialOwner(materialId) {
        return get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
    }
  }
}