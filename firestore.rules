/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based security model with public read access for materials.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, write access is restricted to the user itself.
 * - /materials/{materialId}: Stores material listings, read access is public, and write access is restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Public read access to the /materials collection to allow unauthenticated browsing.
 * - Owner-only write access to the /users/{userId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User with matching {userId} can create their own document.
     * @allow (get, update, delete) User with matching {userId} can read/update/delete their own document.
     * @deny (create, get, list, update, delete) Other users cannot access these documents.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to material documents.
     * @path /materials/{materialId}
     * @allow (get, list) Anyone can read material documents.
     * @allow (create) Authenticated users can create material documents, postedBy is owner
     * @allow (update, delete) Owner (postedBy) can update/delete the material document.
     * @deny (create, update, delete) Unauthenticated users and non-owners cannot write.
     * @principle Allows public read access, but restricts writes to authenticated users.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(postedBy) {
        return request.auth != null && request.auth.uid == postedBy;
      }

       function isExistingOwner(postedBy) {
        return isOwner(postedBy) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);
    }
  }
}