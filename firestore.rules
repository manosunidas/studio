/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset implements a user-ownership model for user profiles and materials,
 * with public read access to material listings.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /materials/{materialId}: Stores material listings with associated data.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Material listings are publicly readable, but only the owner can modify them.
 * - Material requests can be created by anyone, but only the material owner can read them.
 *
 * Denormalization for Authorization:
 * - Material documents include a `postedBy` field (ownerId) to enable ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get) User with matching ID can create, update, and read their own profile.
     * @deny (create, update, get) User attempts to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Secure material listings. Anyone can read, but only the owner can modify or delete.
     * @path /materials/{materialId}
     * @allow (get, list) Anyone can read or list materials.
     * @allow (create) User can create a material if postedBy matches their UID.
     * @allow (update, delete) User can update/delete if they are the owner of the material.
     * @deny (create) User attempts to create a material with a mismatched postedBy field.
     * @deny (update, delete) User attempts to update/delete a material they don't own.
     * @principle Implements public read access with owner-only writes for materials.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.postedBy);
      allow delete: if isExistingOwner(resource.data.postedBy);
    }

    /**
     * @description Secure material requests. Anyone can create a request, but only the material owner can read them.
     * @path /materials/{materialId}/requests/{requestId}
     * @allow (create) Any signed-in user can create a request.
     * @allow (get, list) Only the owner of the material can read the requests.
     * @deny (get, list) Non-owners of the material cannot read requests.
     * @principle Restricts read access to material requests to the material owner.
     */
    match /materials/{materialId}/requests/{requestId} {
      allow get, list: if get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}