/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and materials, with public read access for materials and owner-only access to material requests.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /materials/{materialId}: Stores material listings.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for a material.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Anyone can read material listings.
 * - Only the owner of a material can read the requests for it.
 * - Anyone can create a request for a material.
 *
 * Denormalization for Authorization:
 * - Material documents have a `postedBy` field that stores the user ID of the poster, enabling owner-based security rules without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read,write) User with matching {userId} can read/write their own profile.
     * @deny (read,write) User trying to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allow the user to read their own profile
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users
      // Allow the user to create their own profile, but only if the userId matches the authenticated user's id
      allow create: if isOwner(userId);
      // Allow the user to update their own profile
      allow update: if isOwner(userId);
      // Allow the user to delete their own profile
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to material documents.
     * @path /materials/{materialId}
     * @allow (read) Anyone can read material listings.
     * @allow (create,update,delete) Only the user who posted the material can modify or delete it.
     * @deny (create,update,delete) Unauthorized users cannot modify or delete material listings.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /materials/{materialId} {
      // Allow anyone to read material listings
      allow get, list: if true;
      // Allow the user who posted the material to create it
      allow create: if request.auth != null && request.resource.data.postedBy == request.auth.uid;
      // Allow the user who posted the material to update it
      allow update: if request.auth != null && resource.data.postedBy == request.auth.uid;
      // Allow the user who posted the material to delete it
      allow delete: if request.auth != null && resource.data.postedBy == request.auth.uid;

      /**
       * @description Controls access to requests for a specific material.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) Anyone can create a request for a material.
       * @allow (read) Only the owner of the material can read the requests.
       * @deny (read) Users who are not the material owner cannot read requests.
       * @deny (create) Unauthorized users cannot create requests.
       * @principle Restricts read access to material requests to the material owner.
       */
      match /requests/{requestId} {
        // Allow anyone to create a request for a material
        allow create: if request.auth != null;
        // Only the material owner can read the requests
        allow get, list: if get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        allow update, delete: if false;
      }
    }
  }

  // Helper function to determine if the current user is the owner of the document
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  // Helper function to determine if the current user is the existing owner of the document
  function isExistingOwner(userId) {
    return request.auth != null && request.auth.uid == userId && resource != null;
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}