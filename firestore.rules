/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and
 * material listings, ensuring users can only manage their own data.
 * Public read access is granted for materials.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /materials/{materialId}: Stores material listings, publicly readable but
 *   modifiable only by the owner (the user who created the listing).
 * - /transactions/{transactionId}: Stores transaction data, accessible only to
 *   the users involved in the transaction (donor or claimer).
 * - /suggestions/{suggestionId}: Stores material suggestions, accessible only to
 *   the user for whom the suggestion was made.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own user documents.
 * - Material listings are publicly readable.
 * - Only the owner of a material can update or delete it.
 * - Transactions are only accessible to the donor and claimer.
 * - Suggestions are only accessible to the user for whom they are made.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * The `materials` collection denormalizes the `userId` field directly onto
 * each material document. This allows for simple `isOwner()` checks without
 * needing to perform additional `get()` operations. Transactions also denormalize
 * `donorId` and `claimerId` for similar reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the current user is signed in
     * @return {bool}
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource, ensuring the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to a user's profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId creates their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId reads/modifies their profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify another user's profile.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to material listings.
     * @path /materials/{materialId}
     * @allow (get, list) - Anyone can read or list material listings.
     * @allow (create) - Authenticated user creates a material listing with their userId.
     * @allow (update, delete) - Authenticated user with matching userId modifies/deletes their material listing.
     * @deny (create) - Unauthenticated user attempts to create a material listing.
     * @deny (update, delete) - Authenticated user attempts to modify another user's material listing.
     * @principle Enforces document ownership for writes to material listings, allows public reads.
     */
    match /materials/{materialId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants access to transaction records.
     * @path /transactions/{transactionId}
     * @allow (get) - Authenticated user can read transaction record if they are the donor or claimer.
     * @allow (list) - No listing of transactions.
     * @allow (create) - Authenticated user can create transaction record.
     * @deny (update, delete) - No updates or deletes to transactions.
     * @deny (get) - Authenticated user cannot read transaction if they are not the donor or claimer.
     * @principle Enforces document ownership for writes to material listings, allows public reads.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && (resource.data.donorId == request.auth.uid || resource.data.claimerId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to suggestions.
     * @path /suggestions/{suggestionId}
     * @allow (get) - Authenticated user can read suggestion record if they are the intended user.
     * @allow (list) - No listing of suggestions.
     * @allow (create) - No creating of suggestions from client.
     * @deny (update, delete) - No updates or deletes to suggestions.
     * @deny (get) - Authenticated user cannot read suggestion if they are not the intended user.
     * @principle Enforces document ownership for writes to material listings, allows public reads.
     */
    match /suggestions/{suggestionId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}