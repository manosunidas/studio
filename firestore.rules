/**
 * @fileoverview Firestore Security Rules for Manos Unidas Digital.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open access for reading material listings with strict ownership-based control for user profiles and material management.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /materials/{materialId}: Stores material listings. Read access is public, but write access is limited to the owner.
 * - /materials/{materialId}/requests/{requestId}: Stores requests for materials. Anyone can create, but only the material owner can read.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is enabled for material listings to encourage community participation.
 * - Material requests can be created by anyone to simplify the donation process, but they are secured against unauthorized access.
 *
 * Denormalization for Authorization:
 * - Material documents contain a `postedBy` field to quickly identify the owner, avoiding costly `get()` calls to the user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure material listings. Public read, owner-only write.
     * @path /materials/{materialId}
     * @allow (get, list) any user can read all the materials.
     * @allow (create) only authenticated user can create a material and the postedBy field on the document must match the authenticated user's UID.
     * @allow (update, delete) only the user who posted the material can modify or delete it.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return isSignedIn() && resource.data.postedBy == request.auth.uid;
      }

      function isCreatingOwner() {
        return isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isCreatingOwner();
      allow update: if isOwner();
      allow delete: if isOwner();

      /**
       * @description Secure material requests. Anyone can create a request, but only the material owner can read them.
       * @path /materials/{materialId}/requests/{requestId}
       * @allow (create) any authenticated user can create a request for a material.
       * @allow (get, list) only the material owner can read requests for their materials.
       * @deny (update, delete) no one is allowed to update or delete a request.
       * @principle Restricts read access to material requests to the material owner.
       */
      match /requests/{requestId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isMaterialOwner(materialId) {
          return isSignedIn() && get(/databases/$(database)/documents/materials/$(materialId)).data.postedBy == request.auth.uid;
        }

        allow get: if isMaterialOwner(materialId);
        allow list: if isMaterialOwner(materialId);
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
      }
    }
  }
}